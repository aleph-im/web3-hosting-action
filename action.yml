name: 'Aleph Web3 Hosting'
description: "Deploy a website or dApp on Aleph Cloud"
author: 'Aleph Cloud'
branding:
  icon: upload-cloud
  color: blue

inputs:
  path:
    description: "Path to the static website's files (eg frontend/out)"
    required: true
  private-key:
    description: 'The private key of the Ethereum wallet to use'
    required: false
  domain:
    description: 'Domain name to link to the deployed site (eg libertai.io)'
    required: false
    default: ''
  retention_days:
    description: "Delete files older than this number of days. Leave blank to skip deletion"
    required: false
    default: ""
outputs:
  url:
    value: ${{ steps.set-outputs.outputs.url }}
    description: "The deployed URL to access the website"


runs:
  using: 'composite'
  steps:
    - name: Checkout my composite action repo
      uses: actions/checkout@v4
      with:
        repository: aleph-im/web3-hosting-action
        path: aleph-web3-hosting-action

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: 3.11

    - name: Install dependencies
      run: |
        pip install -r ./aleph-web3-hosting-action/requirements.txt
      shell: bash

    - name: Upload on IPFS
      shell: bash
      run: |
          result=$(python ./aleph-web3-hosting-action/publish-on-aleph.py ${{ inputs.path }})
          echo "IPFS_CID_V0=$(echo $result | jq -r '.cid_v0')" >> $GITHUB_ENV
          echo "IPFS_CID_V1=$(echo $result | jq -r '.cid_v1')" >> $GITHUB_ENV

    - name: Pin with Aleph
      if: ${{ inputs.private-key != '' }}
      shell: bash
      run: |
        mkdir --parents /home/runner/.aleph-im/private-keys
        echo ${{ inputs.private-key }} | xxd -r -p > /home/runner/.aleph-im/private-keys/ethereum.key

        pip install 'git+https://github.com/aleph-im/aleph-client@1.6.1'

        TMP_JSON=$(mktemp)
        aleph file pin ${{ env.IPFS_CID_V0 }} > $TMP_JSON 2>/tmp/aleph_err.log

        if [ -s "$TMP_JSON" ]; then
          ITEM_HASH=$(jq -r '.item_hash' < $TMP_JSON)
          echo "ITEM_HASH=$ITEM_HASH" >> $GITHUB_ENV
        else
          echo "‚ùå No output captured from aleph file pin"
          exit 1
        fi


    - name: Find existing PR comment
      if: ${{ github.event_name == 'pull_request' }}
      uses: peter-evans/find-comment@v3
      id: fc
      with:
        issue-number: ${{ github.event.pull_request.number }}
        comment-author: 'github-actions[bot]'
        body-includes: Deployed on

    - name: Comment deploy on the PR
      if: ${{ github.event_name == 'pull_request' && inputs.domain == '' }}
      uses: peter-evans/create-or-update-comment@v4
      with:
        comment-id: ${{ steps.fc.outputs.comment-id }}
        issue-number: ${{ github.event.pull_request.number }}
        body: |
          Deployed on:
          - https://${{ env.IPFS_CID_V1 }}.ipfs.aleph.sh

          ${{ inputs.private-key == '' && '> This link is accessible until the static files are garbage collected, pass your private key to the action to avoid this.' || '' }}
        edit-mode: replace
      continue-on-error: true

    - name: Check if private key is present for linking
      if: ${{ inputs.domain != '' && inputs.private-key == '' }}
      shell: bash
      run: |
        echo "::error ::You must pass your private key to link the domain."
        exit 1

    - name: Link domain
      if: ${{ inputs.domain != '' }}
      shell: bash
      run: |
        bash -c "echo 'y' | aleph domain attach '${{ inputs.domain }}' --item-hash $ITEM_HASH"

    - name: Comment domain deploy on the PR
      if: ${{ inputs.domain != '' && github.event_name == 'pull_request' }}
      uses: peter-evans/create-or-update-comment@v4
      with:
        comment-id: ${{ steps.fc.outputs.comment-id }}
        issue-number: ${{ github.event.pull_request.number }}
        body: |
          Deployed on https://${{ inputs.domain }}
        edit-mode: replace
      continue-on-error: true

    - name: Run stale file cleanup
      if: ${{ inputs.retention_days != '' }}
      shell: bash
      run: |
          set -euo pipefail

          STALE_DAYS="${{ inputs.retention_days }}"

          echo "Checking for files older than $STALE_DAYS days..."
          THRESHOLD=$(date -u -d "-$STALE_DAYS days" +"%Y-%m-%dT%H:%M:%S")
          echo "Threshold time: $THRESHOLD"

          LIST_OUTPUT=$(mktemp)
          ERR_LOG=/tmp/aleph_list_err.log

          echo "Fetching Aleph files..."
          aleph file list --json > "$LIST_OUTPUT" 2>"$ERR_LOG" || true

          if [ ! -s "$LIST_OUTPUT" ]; then
            echo "‚ùå No output captured from aleph file list"
            cat "$ERR_LOG" || true
            exit 1
          fi

          if grep -qE "Failed to retrieve files|Status code" "$LIST_OUTPUT"; then
            echo "‚ö†Ô∏è Aleph returned an error instead of JSON:"
            cat "$LIST_OUTPUT"
            exit 0
          fi

          # Loop through files and delete stale ones
          jq -c '.files[]?' < "$LIST_OUTPUT" | while read -r file; do
            CREATED=$(echo "$file" | jq -r '.created')
            ITEM_HASH=$(echo "$file" | jq -r '.item_hash')

            if [[ "$CREATED" < "$THRESHOLD" ]]; then
              echo "üóëÔ∏è Deleting stale file with item_hash: $ITEM_HASH (created: $CREATED)"
              aleph file forget "$ITEM_HASH" 2>/tmp/aleph_forget_err.log
            else
              echo "‚úÖ Skipping fresh file (created: $CREATED)"
            fi
          done

    - name: Set outputs
      id: set-outputs
      shell: bash
      run: |
        if [[ -n "${{ inputs.domain }}" ]]; then
          URL=https://${{ inputs.domain }}
        else
          URL=https://${{ env.IPFS_CID_V1 }}.ipfs.aleph.sh
        fi
        echo "url=$url" >> "$GITHUB_OUTPUT"
